/* Forwarding refs in React using forwardRef
https://blog.logrocket.com/cleaning-up-the-dom-with-forwardref-in-react/

When a child component needs to reference its parent component’s current node, the parent component needs a way to send down its ref to the child.
 The technique is called ref forwarding.

Ref forwarding is a technique for automatically passing a ref through a component to one of its children.
  It’s very useful when building reusable component libraries.

  forwardRef is a function used to pass the ref to a child component.

Let’s take an example of a new library with an InputText component that will provide a lot of functionality, though, for now, we’ll keep it simple: */

const InputText = (props) => (
<input {...props} />
));

/* The InputText() component will tend to be used throughout the application in a similar manner as a regular DOM input,
  therefore accessing its DOM node may be unavoidable for managing focus, selection, or animations related to it.

In the example below, other components in the application have no access to the DOM input element generated by the InputText() component and is,
thus, restricting some of the operations we have already foreseen we would need to meet our application requirements, such as controlling the focus of the input programmatically.

Here is when React.forwardRef enters to obtain a ref passed as props, and then forward it to the DOM input that it renders: */


const InputText = React.forwardRef((props, ref) => (
 <input ref={ref} {...props} />
));

/* Now that our component supports forwardRef, let’s use it in the context of our
application to build a button that will automatically focus the input when it’s clicked.

The code looks as follows: */

import * as React from "react";
import ReactDOM from "react-dom";

const InputText = React.forwardRef((props, ref) => (
 <input ref={ref} {...props} />
));

export default function App() {
 const ref = React.useRef();

 function focus() {
   ref.current.focus();
 }

 return (
   <div className="App">
     <InputText ref={ref} placeholder="my input" />
     <button onClick={focus}>Focus</button>
   </div>
 );
}

const rootElement = document.getElementById("root");
ReactDOM.render(<App />, rootElement);

/*
Here’s a clarification for the code above:

    We define a ref in the component that needs the ref and pass it to the button component
    React will pass the ref through and forward it down to <input ref={ref}> by specifying it as a JSX attribute
    When the ref is attached, ref.current will point to the <input> DOM node
    The second ref argument in the InputRef component only exists when you define a component with React.forwardRef call
    Regular function or class components don’t receive the ref argument, and ref is not available in props either
    Ref forwarding is not limited to DOM components. You can forward refs to class component instances, too
 */