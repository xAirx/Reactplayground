/* Docker Layer Caching#

https://docs.semaphoreci.com/ci-cd-environment/docker-layer-caching/#:~:text=Each%20command%20that%20is%20found,process%20of%20building%20Docker%20images.


This is mostly critical for COPY commands — it is a best practice to split the files and directories copied or added to the docker image, so that files that are most frequently changed are copied as late as possible — as to minimise the effect of the cache miss for the subsequent commands. This is specifically important if there are any commands which are known to be slow and inefficient.

https://medium.com/swlh/docker-caching-introduction-to-docker-layers-84f20c48060a


This document will show you how to use Layer Caching in Docker to make your builds faster and how to apply it in CI / CD workflow.

About Layer Caching in Docker#

Docker creates container images using layers.

Each command that is found in a Dockerfile creates a new layer.

Each layer contains the filesystem changes to the image for the state before the execution of the command and the state after the execution of the command.

Docker uses a layer cache to optimize and speed up the process of building Docker images.

Docker Layer Caching mainly works on the RUN, COPY and ADD commands, which will be explained in more detail next.



The RUN Command#

The RUN command allows you to execute a command in the Docker image.

If the layer that is generated by the RUN command already exists in cache, the RUN command will be executed only once.

As you will see later, a COPY or an ADD command can invalidate the layer cache and make Docker to execute all RUN commands.



The COPY Command#

The COPY command in a Dockerfile allows you to import one or more external files into a Docker image.

When executed, the COPY commands ensures you have the latest version of all relevant external files.

If the contents of all external files on the first COPY command are the same, the layer cache will be used and all subsequent commands until the next ADD or COPY command will use the layer cache.

    However, if the contents of one or more external files are different, then all subsequent commands will be executed without using the layer cache.



In order to take advantage of Layer Caching in Docker you should structure your Dockerfile in a way that frequently changing steps such as COPY are located near the end of the Dockerfile file.

This will ensure that the steps concerned with performing the same action are not unnecessarily rebuilt.




The ADD Command#

The ADD command in a Dockerfile allows you to import external files into a Docker image.

If the contents of all external files on the first ADD command are the same, the layer cache will be used and all subsequent commands until the next ADD or COPY command will use the layer cache.

    However, if the contents of one or more external files are different, then all subsequent commands will be executed without using the layer cache.

    In order to take advantage of Layer Caching in Docker you should structure your Dockerfile in a way that frequently changing steps such as ADD are located near the end of the Dockerfile file.

    This will ensure that the steps concerned with performing the same action are not unnecessarily rebuilt.


    About--cache - from#

The--cache - from command line option in the docker command allows you to build a new image using a pre - existing one as the cache source.
 */